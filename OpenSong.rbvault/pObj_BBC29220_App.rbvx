##RBvx-PrjVaultItem#2# - <http://www.tempel.org/rb/#prjtool>
##OrigFileName:OpenSong.rb
##VaultHdrEnd#
##Format:2#
pObj/B: 426C6F6B704F626ABBC292200000000000000000000000000000000000000000
 Name/S: App
 Cont/N: 0
 bCls/N: 1
 Name/S: App
 Size/N: 128
 Supr/S: Application
 bNtr/N: 0
 Intr/S: 
 bApO/N: 1
 Cnst/D: (Enco/N: 134217984, name/S: POINT_TO_CM, type/N: 2, defn/S: 0.035277778, flag/N: 0)
 HIns/G: 
  Enco/N: 1280
  name/S: Close
  sorc/d: (Enco/N: 134217984
		Sub Close()
		  DebugWriter.Done
		End Sub
  )
 HIns/g: 
 HIns/G: 
  Enco/N: 1536
  name/S: NewDocument
  sorc/d: (Enco/N: 134217984
		Sub NewDocument()
		  
		End Sub
  )
 HIns/g: 
 HIns/G: 
  Enco/N: 1280
  name/S: Open
  sorc/d: (Enco/N: 134217984
		Sub Open()
		  Dim OK As Boolean
		  'Profiler.EnableProfiler
		  Profiler.BeginProfilerEntry "App::Open"
		  
		  DebugWriter = New DebugOutput
		  If System.EnvironmentVariable("OPENSONGDEBUG") = "" Then
		    DebugWriter.Enabled = False
		  Else
		    DebugWriter.Enabled = (System.EnvironmentVariable("OPENSONGDEBUG") = "True")
		  End If
		  OK = DebugWriter.Init
		  DebugWriter.Write "-------------------- Begin Run ----------------------"
		  
		  Splash.Show
		  
		  SmartML.Init
		  
		  AppFolder = App.ExecutableFile
		  If Not AppFolder.Directory Then AppFolder = AppFolder.Parent ' Linux points to the parent folder; the other OSes seem to point to the executable file.
		  
		  '++JRC Moved translation init to beginning so we can translate error & status Msgs 
		  Dim temp As String
		  
		  'Can't translate this until we've loaded the translator
		  'Splash.SetStatus "Loading global settings..."
		  MyGlobals = SmartML.XDocFromFile(AppFolder.Child("OpenSong Settings").Child("Globals"))
		  If MyGlobals = Nil Then
		    MsgBox SmartML.ErrorString + ": " + _
		        AppFolder.Child("OpenSong Settings").AbsolutePath + _
		        " (" + Str(SmartML.ErrorCode) + ")"
		        Quit
		        Return
		      End If
		      
		      'Can't translate this until we've loaded the translator
		      'Splash.SetStatus "Loading translation text..."
		      
		      temp = SmartML.GetValue(MyGlobals.DocumentElement, "language/@file")
		      If Len(temp) = 0 Then
		        temp = "English"
		      End If
		      
		      T = New Translator(AppFolder.Child("OpenSong Languages").Child(temp))
		      If Not T.IsLoaded Then
		        //++EMP 12/05
		        // I think we should alert the user, shouldn't we?
		        //
		        '++JRC
		        App.MouseCursor = Nil
		        '--
		        
		        SmartML.DisplayError
		        //--
		        '++JRC I don't think trying to load another language here would be useful, 
		        'it would either be the same file we just tried, or a language
		        'that the user can't read and doesn't want
		        '
		        Quit
		        'T = New Translator(AppFolder.Child("OpenSong Languages").Item(1))
		        'If Not T.IsLoaded Then
		        'SmartML.DisplayError
		        'Quit
		        'Else
		        'moved to globals
		        'SmartML.SetValue MyGlobals.DocumentElement, "language/@file", AppFolder.Child("OpenSong Languages").Item(1).Name
		        'End If
		        '--
		      Else
		        'moved to globals
		        SmartML.SetValue MyGlobals.DocumentElement, "language/@file", temp
		      End If
		      
		      TranslateMe True
		      '--
		      
		      '++JRC translated
		      Splash.SetStatus T.Translate("load_settings/checking_folders") + "..."
		      '--
		      
		      Dim docsPath As String
		      Dim tmp As New FolderItem
		      
		      ' --- CREATE DOCUMENTS FOLDER ---
		      docsPath = SmartML.GetValue(MyGlobals.DocumentElement, "documents/@folder", False)
		      //++
		      // Bug 1204048: DocsPath needs to be somewhere other than under OpenSong Defaults.
		      // As a temporary fix, just see if that's part of the docspath.  If so, post an error and
		      // reset to the default.
		      //--
		      If InStr(docsPath, "OpenSong Defaults") > 0 Then 
		        '++JRC
		        If NOT AppFolder.Child("Documents").Exists Then 
		          tmp.FolderItem AppFolder.AbsolutePath + "Documents"
		          tmp.CreateAsFolder
		          If NOT tmp.Exists Then 
		            App.MouseCursor = Nil
		            MsgBox T.Translate("errors/no_docs_folder", tmp.AbsolutePath)
		            Quit
		          End If
		          docsPath = tmp.AbsolutePath
		        Else
		          docsPath = ""
		        End If
		        'Translated
		        MsgBox T.Translate("errors/docs_folder", docsPath)
		        '--
		        
		      End If
		      
		      If Len(docsPath) > 0 Then
		        DocsFolder = FileUtils.AbsolutePathToFolderItem(docsPath)
		      Else
		        DocsFolder = DocumentsFolder.Child("OpenSong")
		      End If
		      If DocsFolder = Nil Then DocsFolder = DocumentsFolder.Child("OpenSong")
		      
		      If DocsFolder.Exists Then SmartML.SetValue(MyGlobals.DocumentElement, "documents/@folder", DocsFolder.AbsolutePath)
		      
		      ' Create whatever sub-folders are needed
		      '++JRC
		      If Not AppFolder.Child("OpenSong Scripture").Exists Then
		        App.MouseCursor = Nil
		        MsgBox T.Translate("errors/no_scripture_folder", AppFolder.Child("OpenSong Scripture").AbsolutePath)
		        Quit
		      End If
		      '--
		      //++EMP 11/27/05
		      If Not AppFolder.Child("OpenSong Defaults").Exists Then
		        App.MouseCursor = Nil
		        '++JRC Translated
		        MsgBox T.Translate("errors/no_defaults_folder", AppFolder.Child("OpenSong Defaults").AbsolutePath)
		        '--
		        Quit
		      End If
		      //--
		      If Not DocsFolder.Exists Then
		        If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults"), DocsFolder) Then
		          App.MouseCursor = Nil
		          '++JRC Translated
		          MsgBox T.Translate("errors/no_docs_folder", DocsFolder.AbsolutePath)
		          '--
		          Quit
		        End If
		      End If
		      //++EMP 11/27/05
		      If Not AppFolder.Child("OpenSong Defaults").Child("Settings").Exists Then
		        App.MouseCursor = Nil
		        '++JRC Translated
		        MsgBox  T.Translate("errors/no_settings_folder", AppFolder.Child("OpenSong Defaults").Child("Settings").AbsolutePath)
		        '--
		        Quit
		      End If
		      //--
		      If Not DocsFolder.Child("Settings").Exists Then
		        If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults").Child("Settings"), DocsFolder.Child("Settings")) Then
		          App.MouseCursor = Nil
		          '++JRC Translated
		          MsgBox T.Translate("errors/create_settings_folder", DocsFolder.Child("Settings").AbsolutePath)
		          '--
		          Quit
		        End If
		      End If
		      //++EMP 11/27/05
		      If Not AppFolder.Child("OpenSong Defaults").Child("Songs").Exists Then
		        App.MouseCursor = Nil
		        '++JRC Translated
		        MsgBox   T.Translate("errors/no_songs_folder",  AppFolder.Child("OpenSong Defaults").Child("Songs").AbsolutePath)
		        '--
		        Quit
		      End If
		      //--
		      If Not DocsFolder.Child("Songs").Exists Then
		        If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults").Child("Songs"), DocsFolder.Child("Songs")) Then
		          App.MouseCursor = Nil
		          '++JRC Translated
		          MsgBox T.Translate("errors/create_songs_folder",  DocsFolder.Child("Songs").AbsolutePath)
		          '--
		          Quit
		        End If
		      End If
		      //++EMP 11/27/05
		      If Not AppFolder.Child("OpenSong Defaults").Child("Sets").Exists Then
		        App.MouseCursor = Nil
		        '++JRC Translated
		        MsgBox T.Translate("errors/no_sets_folder",  AppFolder.Child("OpenSong Defaults").Child("Sets").AbsolutePath)
		        '--
		        Quit
		      End If
		      //--
		      If Not DocsFolder.Child("Sets").Exists Then
		        If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults").Child("Sets"), DocsFolder.Child("Sets")) Then
		          App.MouseCursor = Nil
		          '++JRC Translated
		          MsgBox T.Translate("errors/create_sets_folder",  DocsFolder.Child("Sets").AbsolutePath)
		          '--
		          Quit
		        End If
		      End If
		      '++JRC Checked these already
		      'If Not AppFolder.Child("OpenSong Defaults").Child("Settings").Exists Then
		      'App.MouseCursor = Nil
		      'MsgBox "Can't find default Settings folder: " + AppFolder.Child("OpenSong Defaults").Child("Settings").AbsolutePath
		      'Quit
		      'End If
		      
		      'If Not DocsFolder.Child("Settings").Exists Then
		      'If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults").Child("Settings"), DocsFolder.Child("Settings")) Then
		      'App.MouseCursor = Nil
		      'MsgBox "Could not create/edit Settings folder."
		      'Quit
		      'End If
		      'End If
		      
		      //++EMP 11/27/05
		      If Not AppFolder.Child("OpenSong Defaults").Child("Backgrounds").Exists Then
		        App.MouseCursor = Nil
		        '++JRC Translated
		        MsgBox  T.Translate("errors/no_backgrounds_folder",  AppFolder.Child("OpenSong Defaults").Child("Backgrounds").AbsolutePath)
		        '--
		        Quit
		      End If
		      //--
		      If Not DocsFolder.Child("Backgrounds").Exists Then
		        If Not FileUtils.CopyPath(AppFolder.Child("OpenSong Defaults").Child("Backgrounds"), DocsFolder.Child("Backgrounds")) Then
		          App.MouseCursor = Nil
		          '++JRC Translated
		          MsgBox T.Translate("errors/create_backgrounds_folder",  DocsFolder.Child("Backgrounds").AbsolutePath)
		          '--
		          Quit
		        End If
		      End If
		      
		      If (Not DocsFolder.Exists) Or _
		          (Not DocsFolder.Child("Songs").Exists) Or _
		          (Not DocsFolder.Child("Sets").Exists) Or _
		              (Not DocsFolder.Child("Settings").Exists) Or _
		              (Not DocsFolder.Child("Backgrounds").Exists) Then
		              App.MouseCursor = Nil
		              '++JRC Translated
		              MsgBox T.Translate("errors/folder_error")
		              '--
		              Quit
		            End If
		            
		            Dim xml As XmlDocument
		            Dim xnode As XmlNode
		            
		            ' --- LOAD SETTINGS ---
		            '++JRC translated
		            Splash.SetStatus T.Translate("load_settings/main") + "..."
		            '--
		            MyMainSettings = SmartML.XDocFromFile(DocsFolder.Child("Settings").Child("MainSettings"))
		            If MyMainSettings = Nil Then
		              SmartML.DisplayError
		              Quit
		            End If
		            
		            Splash.SetStatus T.Translate("load_settings/print") + "..."
		            MyPrintSettings = SmartML.XDocFromFile(DocsFolder.Child("Settings").Child("PrintSettings"))
		            If MyPrintSettings = Nil Then
		              SmartML.DisplayError
		              Quit
		            End If
		            Splash.SetStatus T.Translate("load_settings/presentation") + "..."
		            MyPresentSettings = SmartML.XDocFromFile(DocsFolder.Child("Settings").Child("PresentSettings"))
		            If MyPresentSettings = Nil Then
		              SmartML.DisplayError
		              Quit
		            End If
		            
		            ' --- BUILD CAPO LIST ---
		            CapoList.Append "1"
		            CapoList.Append "2"
		            CapoList.Append "3"
		            CapoList.Append "4"
		            CapoList.Append "5"
		            
		            ' --- BUILD FONT LIST ---
		            Dim i, j As Integer
		            Splash.SetStatus T.Translate("load_settings/fonts") + "..."
		            j = FontCount - 1
		            For i = 0 to j
		              FontList.Append Font(i)
		            Next i
		            FontList.Sort
		            
		            UpdateTranslationFonts
		            
		            ' --- CHECK FOR LATEST SONG AND SET VERSIONS ---
		            Dim songVersion, setVersion As Double
		            songVersion = SmartML.GetValueN(MyMainSettings.DocumentElement, "version/@songs")
		            setVersion = SmartML.GetValueN(MyMainSettings.DocumentElement, "version/@sets")
		            
		            App.MouseCursor = Nil
		            Dim f As FolderItem
		            
		            GraphicsX.ThicknessFactor = SmartML.GetValueN(App.MyPresentSettings.DocumentElement, "style/@thickness")
		            
		            Profiler.EndProfilerEntry
		            
		            ' --- CHECK FOR A NEWER VERSION ---
		            
		            If Len(SmartML.GetValue(App.MyMainSettings.DocumentElement, "version/@check", False)) < 4 Then _
		                SmartML.SetValueB(App.MyMainSettings.DocumentElement, "version/@check", True)
		            
		            Dim checkVer As CheckVerThread
		            If SmartML.GetValueB(App.MyMainSettings.DocumentElement, "version/@check") Then
		              Splash.SetStatus T.Translate("load_settings/latest_version") + "..."
		              checkVer = new CheckVerThread 
		              checkVer.Run
		            End If
		            
		            '
		            '++JRC
		            Globals.WhitespaceChars.Append " "
		            Globals.WhitespaceChars.Append Chr(ENTER)
		            '--
		            T.TranslateMenu("main_menu", MainMenu)
		            
		            MainWindow.Show
		          End Sub
  )
 HIns/g: 
 HIns/G: 
  Enco/N: 1280
  name/S: UnhandledException
  sorc/d: (Enco/N: 134217984
		Function UnhandledException(error As RuntimeException) As Boolean
		  Dim s As String
		  Dim msg As String
		  
		  s = "Fatal OpenSong Error: "
		  
		  If error isA IllegalCastException Then
		    msg = "IllegalCastException"
		  ElseIf error isA KeyNotFoundException Then
		    msg = "KeyNotFoundException"
		  ElseIf error isA NilObjectException Then
		    msg = "NilObjectException"
		  ElseIf error isA OutOfBoundsException Then
		    msg = "OutOfBoundsException"
		  ElseIf error isA OutOfMemoryException Then
		    msg = "OutOfMemoryException"
		  ElseIf error isA RegExException Then
		    msg = "RegExException"
		  ElseIf error isA RegExSearchPatternException Then
		    msg = "RegExSearchPatternException"
		  ElseIf error isA ShellNotAvailableException Then
		    msg = "ShellNotAvailableException"
		  ElseIf error isA ShellNotRunningException Then
		    msg = "ShellNotRunningException"
		  ElseIf error isA stackOverflowException Then
		    msg = "stackOverflowException"
		  ElseIf error isA EndException Then
		    msg = "EndException"
		  ElseIf error isA InvalidParentException Then
		    msg = "InvalidParentException"
		  ElseIf error isA KeyChainException Then
		    msg = "KeyChainException"
		  ElseIf error isA NoOpenTransportException Then
		    msg = "NoOpenTransportException"
		  ElseIf error isA typeMismatchException Then
		    msg = "typeMismatchException"
		  ElseIf error isA UnsupportedFormatException Then
		    msg = "UnsupportedFormatException"
		  ElseIf error isA XmlDomException Then
		    msg = "XmlDomException"
		  ElseIf error isA XmlException Then
		    msg = "XmlException"
		  ElseIf error isA XmlReaderException Then
		    msg = "XmlReaderException"
		  Else
		    msg = "Unknown exception"
		  End If
		  
		  s = s + msg
		  If error.Message <> "" Then
		    s = s + ", error is '" + error.Message + "'"
		    If error.ErrorNumber <> 0 Then
		      s = s + ", number = " + CStr(error.ErrorNumber)
		    End If
		  End If
		  InputBox.Message s
		  'Quit
		End Function
  )
 HIns/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: CenterInControlScreen
  parm/S: win As Window
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub CenterInControlScreen(win As Window)
		  Dim controlScreen As Integer
		  If App.MyPresentSettings <> Nil Then
		    controlScreen = SmartML.GetValueN(App.MyPresentSettings.DocumentElement, "monitors/@control") - 1
		    If controlScreen < 0 Or controlScreen + 1 > ScreenCount Then controlScreen = 0
		  Else
		    controlScreen = 0
		  End If
		  
		  // Do something reasonable for TwinView screens.
		  // Thanks, Jon!  EMP, June 2006
		  
		  '#If TargetLinux                                                                    
		  If (Screen(controlScreen).Width /2) > Screen(controlScreen).Height Then
		    win.Left = Screen(controlScreen).Left + (Screen(controlScreen).Width - win.Width) / 4
		  Else
		    '#EndIf
		    win.Left = Screen(controlScreen).Left + (Screen(controlScreen).Width - win.Width) / 2
		  End If
		  
		  win.Top = Screen(controlScreen).Top + (Screen(controlScreen).Height  - win.Height) / 2 + 10
		  win.Left = Screen(controlScreen).Left + (Screen(controlScreen).Width - win.Width) / 2
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: ChangeWindowState
  parm/S: wnd As Window, style As Integer
  rslt/S: 
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Sub ChangeWindowState(wnd As Window, style As Integer)
   srcl/S: #if TargetWin32
   srcl/S: Declare Sub ShowWindow Lib "User32" (wnd As Integer, nCmdShow As Integer)
   srcl/S: 
   srcl/S: ShowWindow( wnd.WinHWND, style )
   srcl/S: #endif
   srcl/S: End Sub
  sorc/g: 
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: FriendlyXMLException
  parm/S: e As XMLException
  rslt/S: String
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function FriendlyXMLException(e As XMLException) As String
		  Return e.Message + EndOfLine + " (" + e.Node + ":" + e.Line + ") " + e.Token + " (E" + Str(e.ErrorNumber) + ")"
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: GetFrontControlScreenWindow
  parm/S: 
  rslt/S: Window
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function GetFrontControlScreenWindow() As Window
		  // Returns the frontmost window on the control screen
		  // EMP 26 Feb 2006
		  //
		  Dim w As Window
		  Dim wc As Integer
		  Dim i As Integer
		  Dim cs As Integer
		  
		  wc = WindowCount - 1
		  cs = SmartML.GetValueN(App.MyPresentSettings.DocumentElement, "monitors/@control") - 1
		  
		  For i = 0 To wc
		    If Window(i).Visible Then
		      If Window(i).Left >= Screen(cs).Left _
		          And Window(i).Left < Screen(cs).Left + Screen(cs).Width _
		          And Window(i).Top >= Screen(cs).Top _
		              And Window(i).Top < Screen(cs).Top + Screen(cs).Height _
		              Then
		              Return Window(i)
		            End If
		          End If
		        Next i
		        Return Nil // Fell through, no one is on the control screen 
		      End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: GetPrinterSetup
  parm/S: ShowDialog As Boolean = False, Wnd As Window = Nil
  rslt/S: PrinterSetup
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function GetPrinterSetup(ShowDialog As Boolean = False, Wnd As Window = Nil) As PrinterSetup
		  //
		  // OpenSong maintains a single PrinterSetup object for the printer.  This routine controls
		  // access to that object.  If ShowDialog is True, then the PrinterSetup dialog will be shown.
		  // If Wnd is not Nil, that Dialog will be attached to the given window (Mac only).
		  //
		  // RealBasic for the Mac has an issue with the PrinterSetup object.  The one returned
		  // from PageSetupDialog is invalid.  It has to be copied into a new one to be used.  For
		  // this reason, a clone is returned on OS X.
		  //
		  // On Windows, a second call to OpenPrinterDialog with the same PrinterSetup object
		  // results in no dialog display and Nil returned for the Graphics object.  Copy it, and
		  // all works fine.  Go figure.
		  //
		  // TODO: Save SetupString across program invocations.  Issues to remember: SetupString is
		  // platform dependent.  SetupString on Windows can't just be sent to an XML file such as
		  // MyPrintSettings with SmartML.SetValue.  Use something like EncodeBase64 to store
		  // and retrieve.
		  // This will also need to include the RB version as an attribute, as SetupStrings changed
		  // format in RB 2006 r3.
		  //
		  // Finally, this needs a different approach for Linux since (as of RB2005R4) PrinterSetup
		  // doesn't do anything useful.
		  //
		  
		  Dim TempPS As PrinterSetup
		  Dim NewPS As PrinterSetup
		  
		  If MyPrinterSetup = Nil And Not ShowDialog Then Return Nil
		  
		  TempPS = New PrinterSetup
		  TempPS.MaxHorizontalResolution = -1
		  TempPS.MaxVerticalResolution = -1
		  
		  If MyPrinterSetup <> Nil Then
		    TempPS.SetupString = MyPrinterSetup.SetupString
		  End If
		  
		  If ShowDialog Then
		    If TempPS.PageSetupDialog(Wnd) Then
		      MyPrinterSetup = TempPS // Save the new settings
		      If SmartML.GetValueB(MyPrintSettings.DocumentElement, "page/@points") Then
		        SmartML.SetValueN(MyPrintSettings.DocumentElement, "page/@height",_
		            InchesToPoints(TempPS.PageHeight / TempPS.VerticalResolution))
		        SmartML.SetValueN(MyPrintSettings.DocumentElement, "page/@width",_
		            InchesToPoints(TempPs.PageWidth / TempPS.HorizontalResolution))
		      Else
		        SmartML.SetValueN(MyPrintSettings.DocumentElement, "page/@height", _
		            TempPS.PageHeight / TempPS.VerticalResolution)
		        SmartML.SetValueN(MyPrintSettings.DocumentElement, "page/@width", _
		            TempPS.PageWidth / TempPS.HorizontalResolution)
		      End If
		    Else 
		      Return Nil // User cancelled dialog. 
		    End If
		  Else // Don't show dialog
		    
		  End If
		  // We have a non-null MyPrinterSetup now.  Copy it and return
		  // Sadly, this has to be OS-specific, at least under RB5.5.
		  // If, on OS X, if you do a straight copy it bombs.  If you copy
		  // the setup string, it doesn't bomb but the horizontal and vertical resolutions
		  // are set to 72, which really does a number on things if it is reporting
		  // height and width at something other than 72dpi.
		  // Copying the setup string on Windows started off working, but
		  // then started returning an invalid pointer that would crash OS.
		  // This is insane...
		  // (September 2006: Curiouser and curiouser.  After taking another look
		  // at this problem, the same code appears to work for both Mac and Windows.
		  // Hopefully the printer fixes in RB 2006 r3 will let us put this to bed once
		  // and for all.)
		  
		  '#If TargetMacOS
		  NewPS = New PrinterSetup
		  NewPS.MaxHorizontalResolution = -1
		  NewPS.MaxVerticalResolution = -1
		  NewPS.SetupString = MyPrinterSetup.SetupString
		  Return NewPS
		  '#ElseIf TargetWin32
		  'Return MyPrinterSetup
		  '#EndIf
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: MaximizeInControlScreen
  parm/S: win As Window
  rslt/S: 
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Sub MaximizeInControlScreen(win As Window)
   srcl/S: Dim controlScreen As Integer
   srcl/S: If App.MyPresentSettings <> Nil Then
   srcl/S: controlScreen = SmartML.GetValueN(App.MyPresentSettings.DocumentElement, "monitors/@control") - 1
   srcl/S: If controlScreen < 0 Or controlScreen + 1 > ScreenCount Then controlScreen = 0
   srcl/S: Else
   srcl/S: controlScreen = 0
   srcl/S: End If
   srcl/S: 
   srcl/S: // Added to support TwinView displays under Linux
   srcl/S: // Thanks, Jon!  EMP, June 2006
   srcl/S: 
   srcl/S: #If TargetLinux
   srcl/S: If (Screen(controlScreen).Width /2) > Screen(controlScreen).Height Then
   srcl/S: win.Width = (Screen(controlScreen).Width /2) - 40
   srcl/S: else
   srcl/S: win.Width = Screen(controlScreen).Width - 40
   srcl/S: End If
   srcl/S: #Else
   srcl/S: win.Width = Screen(controlScreen).Width - 40
   srcl/S: #EndIf
   srcl/S: 
   srcl/S: win.Height = Screen(controlScreen).Height - 115
   srcl/S: 
   srcl/S: win.Top = Screen(controlScreen).Top + (Screen(controlScreen).Height  - win.Height) / 2 + 10
   srcl/S: win.Left = Screen(controlScreen).Left + (Screen(controlScreen).Width - win.Width) / 2
   srcl/S: End Sub
  sorc/g: 
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: MinimizeWindow
  parm/S: Wnd As Window
  rslt/S: 
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Sub MinimizeWindow(Wnd As Window)
   srcl/S: //++
   srcl/S: // Provides functionality to minimize a window to the taskbar on Windows, or Hide the window on Mac
   srcl/S: // No functionality yet on Linux (due to testing constraints)
   srcl/S: //
   srcl/S: // This routine can be replaced for all platforms by the Window.Minimize method when OpenSong moves
   srcl/S: // to RealBasic 2006 or later.
   srcl/S: //
   srcl/S: // Ed Palmer, May 2006
   srcl/S: //--
   srcl/S: 
   srcl/S: Dim hwnd As Integer
   srcl/S: Dim status As Integer
   srcl/S: Dim lparam As New MemoryBlock(4)
   srcl/S: Const WM_SYSCOMMAND = 274
   srcl/S: Const SC_MINIMIZE = 61472
   srcl/S: 
   srcl/S: #If TargetWin32 Then
   srcl/S: Declare Function SendMessageA Lib "user32" (ByVal hwnd as Integer, ByVal msg as Integer, ByVal wParam as Integer, ByVal lParam as Ptr) as Integer 
   srcl/S: 
   srcl/S: hwnd = Wnd.WinHWND
   srcl/S: 
   srcl/S: status = SendMessageA(wnd.WinHWND, WM_SYSCOMMAND, SC_MINIMIZE, lparam)
   srcl/S: 
   srcl/S: Return
   srcl/S: 
   srcl/S: #ElseIf TargetMacOS
   srcl/S: Wnd.Hide
   srcl/S: #Endif
   srcl/S: End Sub
  sorc/g: 
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: RestoreWindow
  parm/S: Wnd As Window
  rslt/S: 
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Sub RestoreWindow(Wnd As Window)
   srcl/S: 
   srcl/S: Dim hwnd As Integer
   srcl/S: Dim status As Integer
   srcl/S: Dim lparam As New MemoryBlock(4)
   srcl/S: Const WM_SYSCOMMAND = 274
   srcl/S: Const SC_MINIMIZE = 61472
   srcl/S: Const SC_RESTORE = &HF120
   srcl/S: 
   srcl/S: #If TargetWin32 Then
   srcl/S: Declare Function SendMessageA Lib "user32" (ByVal hwnd as Integer, ByVal msg as Integer, ByVal wParam as Integer, ByVal lParam as Ptr) as Integer 
   srcl/S: 
   srcl/S: hwnd = Wnd.WinHWND
   srcl/S: 
   srcl/S: status = SendMessageA(wnd.WinHWND, WM_SYSCOMMAND, SC_RESTORE, lparam)
   srcl/S: 
   srcl/S: Return
   srcl/S: 
   srcl/S: #ElseIf TargetMacOS
   srcl/S: Wnd.Show
   srcl/S: #Endif
   srcl/S: End Sub
  sorc/g: 
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: SetForeground
  parm/S: Wnd As Window
  rslt/S: 
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Sub SetForeground(Wnd As Window)
   srcl/S: '++JRC
   srcl/S: #If TargetWin32 Then
   srcl/S: 
   srcl/S: Declare Sub SetForegroundWindow Lib "user32" (ByVal hwnd as Integer)
   srcl/S: 
   srcl/S: SetForegroundWindow(wnd.WinHWND)
   srcl/S: #Endif
   srcl/S: '--
   srcl/S: End Sub
  sorc/g: 
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: SmartVersion
  parm/S: 
  rslt/S: String
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function SmartVersion() As String
		  Dim t As String
		  
		  t = "v" +  Str(App.MajorVersion) + "." + Str(App.MinorVersion)
		  If App.BugVersion > 0 Then t = t + "." + Str(App.BugVersion) 
		  t = t + " Beta 2"
		  If App.NonReleaseVersion > 0 Then t = t + "-" + Str(App.NonReleaseVersion)
		  Return t
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: TranslateMe
  parm/S: splashShowing As Boolean = False
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub TranslateMe(splashShowing As Boolean = False)
		  Dim xnode As XmlNode
		  Dim i As Integer
		  
		  StylePreview = T.GetNode("style_preview")
		  
		  ' --- BUILD TEMPO LIST ---
		  If splashShowing Then Splash.SetStatus T.Translate("load_settings/tempos") + "..."
		  xnode = T.GetNode("tempo_list").FirstChild
		  For i = UBound(TempoList) DownTo 1
		    TempoList.Remove i
		  Next i
		  While xnode <> Nil
		    TempoList.Append SmartML.GetValue(xnode, "@name")
		    xnode = xnode.NextSibling
		  Wend
		  
		  ' --- BUILD THEME LIST ---
		  If splashShowing Then Splash.SetStatus T.Translate("load_settings/themes") + "..."
		  xnode = T.GetNode("theme_list").FirstChild
		  For i = UBound(ThemeList) DownTo 1
		    ThemeList.Remove i
		  Next i
		  While xnode <> Nil
		    ThemeList.Append SmartML.GetValue(xnode, "@name")
		    xnode = xnode.NextSibling
		  Wend
		  
		  ' --- BUILD TIME SIG LIST ---
		  If splashShowing Then Splash.SetStatus T.Translate("load_settings/time_signatures") + "..."
		  xnode = T.GetNode("time_sig_list").FirstChild
		  For i = UBound(TimeSigList) DownTo 1
		    TimeSigList.Remove i
		  Next i
		  While xnode <> Nil
		    TimeSigList.Append SmartML.GetValue(xnode, "@name")
		    xnode = xnode.NextSibling
		  Wend
		  
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: UpdateTranslationFonts
  parm/S: 
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub UpdateTranslationFonts()
		  Dim i As Integer
		  For i = UBound(TranslationFonts) DownTo 1
		    TranslationFonts.Remove i
		  Next i
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/headings")
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/labels")
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/text_fields")
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/large_headings")
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/buttons")
		  TranslationFonts.Append SmartML.GetValueF(MyMainSettings.DocumentElement, "fonts/fixed_width")
		End Sub
  )
 Meth/g: 
 PDef/D: (name/S: MenuBar, PVal/S: -1144876511)
 Prop/G: 
  Enco/N: 134217984
  decl/S: AppFolder As FolderItem
  sorc/G: 
   Enco/N: 134217984
   ntln/S: AppFolder As FolderItem
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: CapoList(0) As String
  sorc/G: 
   Enco/N: 134217984
   ntln/S: CapoList(0) As String
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: DebugWriter As DebugOutput
  sorc/G: 
   Enco/N: 134217984
   ntln/S: DebugWriter As DebugOutput
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: DocsFolder As FolderItem
  sorc/G: 
   Enco/N: 134217984
   ntln/S: DocsFolder As FolderItem
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: FontList(0) As String
  sorc/G: 
   Enco/N: 134217984
   ntln/S: FontList(0) As String
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyBible As Bible
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyBible As Bible
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyFontChooser As FontChooser
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyFontChooser As FontChooser
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyGlobals As XmlDocument
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyGlobals As XmlDocument
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyMainSettings As XmlDocument
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyMainSettings As XmlDocument
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyPresentSettings As XmlDocument
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyPresentSettings As XmlDocument
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyPrinterSetup As PrinterSetup
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyPrinterSetup As PrinterSetup
   ntln/S: Global printer settings.
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: MyPrintSettings As XmlDocument
  sorc/G: 
   Enco/N: 134217984
   ntln/S: MyPrintSettings As XmlDocument
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: SplashShowing As Boolean
  sorc/G: 
   Enco/N: 134217984
   ntln/S: SplashShowing As Boolean
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: StylePreview As XmlNode
  sorc/G: 
   Enco/N: 134217984
   ntln/S: StylePreview As XmlNode
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: T As Translator
  sorc/G: 
   Enco/N: 134217984
   ntln/S: T As Translator
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: TempoList(0) As String
  sorc/G: 
   Enco/N: 134217984
   ntln/S: TempoList(0) As String
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: ThemeList(0) As String
  sorc/G: 
   Enco/N: 134217984
   ntln/S: ThemeList(0) As String
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: TimeSigList(0) As String
  sorc/G: 
   Enco/N: 134217984
   ntln/S: TimeSigList(0) As String
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: TranslationFonts(0) As FontFace
  sorc/G: 
   Enco/N: 134217984
   ntln/S: TranslationFonts(0) As FontFace
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
pObj/b: 
##RBvx-End#
