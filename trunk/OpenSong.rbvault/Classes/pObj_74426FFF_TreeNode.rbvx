##RBvx-PrjVaultItem#2# - <http://www.tempel.org/rb/#prjtool>
##OrigFileName:OpenSong.rb
##VaultHdrEnd#
##Format:2#
pObj/B: 426C6F6B704F626A74426FFF0000000000000000000000000000000000000000
 Name/S: TreeNode
 Cont/N: -1131477696
 bCls/N: 1
 Name/S: TreeNode
 Size/N: 36
 bNtr/N: 0
 Intr/S: 
 Meth/G: 
  Enco/N: 134217984
  name/S: delete
  parm/S: word as String, parent as TreeNode=nil
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub delete(word as String, parent as TreeNode=nil)
		  dim node as TreeNode
		  
		  if (entry.word=word) then 'found word
		    if (left=nil AND right=nil) then
		      if (parent <> nil) then
		        if (parent.left= Me) then
		          parent.left=nil
		        else
		          parent.right=nil
		        end if
		      end if
		      
		    elseif (left=nil) then
		      entry=right.entry
		      left=right.left
		      right=right.right
		      
		    elseif left.right=nil then
		      entry=left.entry
		      right=left.right
		      left=left.left
		      
		    else
		      node=left
		      
		      while node.right.right <> nil
		        node= node.right
		      wend
		      
		      entry=node.right.entry
		      
		      node.right=nil
		    end if
		    
		    
		  elseif (word<entry.word) then
		    if (left=nil) then
		      return'word not found
		    end if
		    
		    left.delete(word, Me)
		  else
		    if (right=nil) then
		      return'word not found
		    end if
		    
		    right.delete(word, Me)
		  end if
		  
		  
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: find
  parm/S: word as String
  rslt/S: TreeNode
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function find(word as String) As TreeNode
		  'method recusively searches the tree for the word.  If the word isn't in the tree then it is added
		  
		  if (entry.word=word) then
		    return Me
		  elseif (word<entry.word) then
		    if (left=nil) then
		      left= new TreeNode(new IndexEntry(word))
		      return left
		    end if
		    
		    return left.find(word)
		  else
		    if (right=nil) then
		      right= new TreeNode(new IndexEntry(word))
		      return right
		    end if
		    
		    return right.find(word)
		  end if
		  
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: inorderTraverse
  parm/S: list() as IndexEntry
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub inorderTraverse(list() as IndexEntry)
		  dim rlist() as IndexEntry
		  dim x as Integer
		  
		  if (left<> nil) then
		    left.inorderTraverse(list)
		  end if
		  
		  list.Append(entry)
		  
		  if (right<> nil) then
		    right.inorderTraverse(rlist)
		  end if
		  
		  for x=0 to UBound(rlist)
		    list.Append(rlist(x))
		  next x
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: TreeNode
  parm/S: tentry As IndexEntry, tleft As TreeNode=nil, tright As TreeNode=nil
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub TreeNode(tentry As IndexEntry, tleft As TreeNode=nil, tright As TreeNode=nil)
		  entry=tentry
		  left=tleft
		  right= tright
		End Sub
  )
 Meth/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: entry As IndexEntry
  sorc/G: 
   Enco/N: 134217984
   ntln/S: entry As IndexEntry
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: left As TreeNode
  sorc/G: 
   Enco/N: 134217984
   ntln/S: left As TreeNode
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: right As TreeNode
  sorc/G: 
   Enco/N: 134217984
   ntln/S: right As TreeNode
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
pObj/b: 
##RBvx-End#
