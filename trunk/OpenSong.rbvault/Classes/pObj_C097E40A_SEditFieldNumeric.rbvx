##RBvx-PrjVaultItem#2# - <http://www.tempel.org/rb/#prjtool>
##OrigFileName:OpenSong.rb
##VaultHdrEnd#
##Format:2#
pObj/B: 426C6F6B704F626AC097E40A0000000000000000000000000000000000000000
 Name/S: SEditFieldNumeric
 Cont/N: -1131477696
 bCls/N: 1
 Name/S: SEditFieldNumeric
 Size/N: 233
 Supr/S: SEditField
 bNtr/N: 0
 Intr/S: 
 HIns/G: 
  Enco/N: 1536
  name/S: GotFocus
  sorc/d: (Enco/N: 134217984
		Sub GotFocus()
		  
		  InitialValue = CurrentValue
		  
		  SelStart = 0
		  SelLength = Len(Text)
		End Sub
  )
 HIns/g: 
 HIns/G: 
  Enco/N: 1536
  name/S: LostFocus
  sorc/d: (Enco/N: 134217984
		Sub LostFocus()
		  //
		  // Validate the field is a number
		  //
		  Dim IsError As Boolean = False
		  If Not IsNumeric(Text) Then
		    InputBox.Message(App.T.Translate("errors/number_please"))
		    SetValue InitialValue
		    SetFocus
		  ElseIf EnforceRange Then
		    If Value < Minimum Then
		      IsError = True
		      CurrentValue = Minimum
		      ValueToText
		    ElseIf Value > Maximum Then 
		      IsError = True
		      CurrentValue = Maximum
		      ValueToText
		    Else
		      CurrentValue = CDbl(Text)
		      ValueToText
		    End If
		  Else
		    CurrentValue = CDbl(Text)
		    ValueToText
		  End If
		End Sub
  )
 HIns/g: 
 HIns/G: 
  Enco/N: 1536
  name/S: TextChange
  sorc/d: (Enco/N: 134217984
		Sub TextChange()
		  
		End Sub
  )
 HIns/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: Constructor
  parm/S: 
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub Constructor()
		  SignalRangeErrors = True
		  Minimum = -2.25073858507201e-308
		  Maximum = 1.79769313486231e308
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: SetValue
  parm/S: NewValue As Double
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub SetValue(NewValue As Double)
		  //
		  // Set the value of the control.
		  // Store in CurrentValue and
		  // then set the text appropriately
		  //
		  Dim ex As New OutOfBoundsException
		  If EnforceRange Then
		    If SignalRangeErrors And (NewValue < Minimum Or NewValue > Maximum) Then
		      ex.Message = App.T.Translate("errors/range_error", CStr(NewValue))
		      Raise ex
		    End If
		  Else
		    If NewValue < Minimum Then NewValue = Minimum
		    If NewValue > Maximum Then NewValue = Maximum
		  End If
		  CurrentValue = NewValue
		  ValueToText
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: Value
  parm/S: 
  rslt/S: Double
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function Value() As Double
		  //
		  // Return the CurrentValue of the control
		  //
		  
		  Return CurrentValue
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: ValueToText
  parm/S: 
  rslt/S: 
  flag/N: 1
  sorc/d: (Enco/N: 134217984
		Sub ValueToText()
		  If DisplayFormat <> "" Then
		    Text = Format(CurrentValue, DisplayFormat)
		  Else
		    Text = CStr(CurrentValue)
		  End If
		End Sub
  )
 Meth/g: 
 Note/G: 
  Enco/N: 134217984
  name/S: Description
  flag/N: 1
  sorc/G: 
   Enco/N: 134217984
   ntln/S: Description
   ntln/S: Subclasses the SEditField to limit input to valid numbers
   ntln/S: This can be used when the format for the number isn't fixed.
   ntln/S: Validation takes place when the field loses focus, not during input.
   ntln/S: 
  sorc/g: 
 Note/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: CurrentValue As Double
  flag/N: 1
  sorc/G: 
   Enco/N: 134217984
   ntln/S: CurrentValue As Double
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: DisplayFormat As String
  flag/N: 5
  sorc/G: 
   Enco/N: 134217984
   ntln/S: DisplayFormat As String
   ntln/S: DisplayFormat contains the format to be used in displaying
   ntln/S: the value of the control.  This is used instead of the base class's
   ntln/S: Format property in order to keep OpenSong from trying to
   ntln/S: re-format the string on input.
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: EnforceRange As Boolean
  flag/N: 4
  sorc/G: 
   Enco/N: 134217984
   ntln/S: EnforceRange As Boolean
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: InitialValue As Double
  flag/N: 1
  sorc/G: 
   Enco/N: 134217984
   ntln/S: InitialValue As Double
   ntln/S: This is the value of the control when the control gets focus.
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: Maximum As Double
  flag/N: 4
  sorc/G: 
   Enco/N: 134217984
   ntln/S: Maximum As Double
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: Minimum As Double
  flag/N: 4
  sorc/G: 
   Enco/N: 134217984
   ntln/S: Minimum As Double
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: SignalRangeErrors As Boolean
  sorc/G: 
   Enco/N: 134217984
   ntln/S: SignalRangeErrors As Boolean
   ntln/S: If True, Raise a exception if the set value violates the min/max for the control
   ntln/S: If False, just set to the min or max as appropriate
   ntln/S: 
  sorc/g: 
 Prop/g: 
pObj/b: 
##RBvx-End#
