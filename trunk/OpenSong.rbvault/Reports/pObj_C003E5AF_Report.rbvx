##RBvx-PrjVaultItem#2# - <http://www.tempel.org/rb/#prjtool>
##OrigFileName:OpenSong.rb
##VaultHdrEnd#
##Format:2#
pObj/B: 426C6F6B704F626AC003E5AF0000000000000000000000000000000000000000
 Name/S: Report
 Cont/N: -1072340153
 bCls/N: 1
 Name/S: Report
 Size/N: 80
 bNtr/N: 0
 Intr/S: 
 Meth/G: 
  Enco/N: 134217984
  name/S: CalcPrintableHeight
  parm/S: 
  rslt/S: Double
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function CalcPrintableHeight() As Double
		  //
		  // Calculate the printable height of the page
		  // based upon the information in the PrintSettings XML document
		  //
		  // Margins are the maximum of what is in the PrinterSetup object returned
		  // by the operating system and the value stored in the PrintSettings XML.
		  //
		  // Height is the MINIMUM of the two values.
		  //
		  // Ed Palmer 5 Feb 2006
		  //
		  // Update September 2006:
		  //
		  // MyPrintSettings can be in points or inches depending on the version of the
		  // PrintSettings XML file.  Take this into account so all calculations here are done in inches.
		  // (This isn't being US-centric, it's just that RB makes calculating in inches easier)
		  //--
		  
		  Dim TMargin, BMargin As Double
		  Dim psHeight, xmlHeight As Double
		  Dim psTMargin, psBMargin As Double
		  
		  TMargin = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@top")
		  BMargin = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@bottom")
		  xmlHeight = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@height")
		  
		  If SmartML.GetValueB(App.MyPrintSettings.DocumentElement, "page/@points") Then
		    TMargin = PointsToInches(TMargin)
		    BMargin = PointsToInches(BMargin)
		    xmlHeight = PointsToInches(xmlHeight)
		  End If
		  
		  If ps <> Nil Then
		    psHeight = ps.PageHeight / ps.VerticalResolution
		    psTMargin = -(ps.PageTop / ps.VerticalResolution)
		    psBMargin = (ps.PageHeight + ps.PageTop - ps.Height) / ps.VerticalResolution
		  Else
		    psHeight = Pow(10, 6) // Insanely large number to insure it's not the Min
		    psTMargin = 0
		    psBMargin = 0
		  End If
		  TopMargin = Max(TMargin, psTMargin)
		  
		  Return Min(xmlHeight, psHeight) - TopMargin - max(BMargin, psBMargin)
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: CalcPrintableWidth
  parm/S: 
  rslt/S: Double
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function CalcPrintableWidth() As Double
		  //
		  // Calculate the printable width of the page
		  // based upon the information in the PrintSettings XML document
		  //
		  // Margins are the maximum of what is in the PrinterSetup object returned
		  // by the operating system and the value stored in the PrintSettings XML.
		  //
		  // Width is the MINIMUM of the two values.
		  //
		  // Ed Palmer 5 Feb 2006
		  //
		  Dim LMargin, RMargin As Double
		  Dim psWidth, xmlWidth As Double
		  Dim psLMargin, psRMargin As Double
		  
		  LMargin = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@left")
		  RMargin = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@right")
		  xmlWidth = SmartML.GetValueN(App.MyPrintSettings.DocumentElement, "page/@width")
		  
		  If SmartML.GetValueB(App.MyPrintSettings.DocumentElement, "page/@points") Then
		    LMargin = PointsToInches(LMargin)
		    RMargin = PointsToInches(RMargin)
		    xmlWidth = PointsToInches(xmlWidth)
		  End If
		  
		  If ps <> Nil Then
		    psWidth = ps.PageWidth / ps.HorizontalResolution
		    psLMargin = -(ps.PageLeft / ps.HorizontalResolution)
		    psRMargin = (ps.PageWidth + ps.PageLeft - ps.Width) / ps.HorizontalResolution
		  Else
		    psWidth = Pow(10, 6) // Just a ridiculously big number so it'll never be the Min
		    psLMargin = 0
		    psRMargin = 0
		  End If
		  
		  LeftMargin = Max(psLMargin, LMargin)
		  
		  Return Min(xmlWidth, psWidth) - LeftMargin - Max(RMargin, psRMargin)
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: Constructor
  parm/S: 
  rslt/S: 
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Sub Constructor()
		  //
		  // Let's set some reasonable (U.S.) defaults "just in case"
		  //
		  TopMargin = 0.5
		  LeftMargin = 0.5
		  PrintableHeight = 10.0
		  PrintableWidth = 7.5
		End Sub
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: Generate
  parm/S: Zoom As Double = 1.0, MyPages As Group2D = Nil
  rslt/S: Boolean
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function Generate(Zoom As Double = 1.0, MyPages As Group2D = Nil) As Boolean
		  //
		  // Implement this in the subclass
		  //
		  App.DebugWriter.Write "Report.Generate: Enter/Exit"
		  InputBox.Message "Entered function Report.Generate:" + EndOfLine +_
		      "This should be implemented in the subclass."
		  Return True
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: GetPage
  parm/S: PageNumber As Integer, Zoom As Double = 1.0
  rslt/S: Object2D
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function GetPage(PageNumber As Integer, Zoom As Double = 1.0) As Object2D
		  //
		  // The source for this method should be in the subclass
		  //
		  App.DebugWriter.Write "Report.GetPage: Enter/Exit"
		  InputBox.Message "Entered function Report.GetPage:" + EndOfLine +_
		      "This should be implemented in the subclass."
		  Return Nil
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: GetPageCount
  parm/S: 
  rslt/S: Integer
  flag/N: 0
  sorc/d: (Enco/N: 134217984
		Function GetPageCount() As Integer
		  //
		  // Returns the number of pages in the report.
		  //
		  // If, for some reason, Pages is Nil, zero will be returned
		  //
		  // Ed Palmer, January 2006
		  //
		  If Pages <> Nil Then
		    App.DebugWriter.Write "Report.GetPageCount: Enter/Exit, count = " + str(Pages.Count)
		    Return Pages.Count
		  Else
		    App.DebugWriter.Write "Report.GetPageCount: Enter/Exit, Pages = Nil"
		    Return 0
		  End If
		End Function
  )
 Meth/g: 
 Meth/G: 
  Enco/N: 134217984
  name/S: Print
  parm/S: 
  rslt/S: Boolean
  flag/N: 0
  sorc/G: 
   Enco/N: 134217984
   srcl/S: Function Print() As Boolean
   srcl/S: //
   srcl/S: // Time to put it on paper
   srcl/S: //
   srcl/S: // Ed Palmer, January 2006
   srcl/S: //
   srcl/S: Dim i As Integer
   srcl/S: Dim CopyCount As Integer
   srcl/S: Dim PagesPrinted As Integer = 0
   srcl/S: Dim g As Graphics
   srcl/S: Dim PrinterPages As Group2D
   srcl/S: Dim xOffset, yOffset As Double
   srcl/S: 
   srcl/S: App.DebugWriter.Write "Report.Print: Enter"
   srcl/S: // Let's check out some things to get ready
   srcl/S: 
   srcl/S: If ps = Nil Then Return False // Gotta have a print setup object (TODO: Fix for Linux)
   srcl/S: 
   srcl/S: PrinterPages = New Group2D
   srcl/S: 
   srcl/S: If Not Generate(ps.HorizontalResolution / 72, PrinterPages) Then Return False
   srcl/S: 
   srcl/S: If PrinterPages = Nil Then Return False // Nothing to print
   srcl/S: If PrinterPages.Count = 0 Then Return False // Ditto
   srcl/S: 
   srcl/S: //
   srcl/S: // Should be OK now.  Time to print
   srcl/S: //
   srcl/S: 
   srcl/S: g =  OpenPrinterDialog(ps, Window(0))
   srcl/S: If g = Nil Then Return False // Error, or user cancelled
   srcl/S: 
   srcl/S: App.DebugWriter.Write StringUtils.Sprintf("Report.Print: copies %d, firstpage %d, lastpage %d, count %d",_
   srcl/S: g.Copies, g.FirstPage, g.LastPage, PrinterPages.Count)
   srcl/S: 
   srcl/S: xOffset = (LeftMargin * ps.HorizontalResolution) + ps.PageLeft
   srcl/S: yOffset = (TopMargin * ps.VerticalResolution) + ps.PageTop
   srcl/S: 
   srcl/S: //
   srcl/S: // Mac OSX will manage copy count through the printer driver,
   srcl/S: // but Windows requires the program to track this.
   srcl/S: //
   srcl/S: #If Not TargetMacOS
   srcl/S: For CopyCount = 1 To g.Copies
   srcl/S: #endif
   srcl/S: For i = 1 To PrinterPages.Count 
   srcl/S: If i >= g.FirstPage And i <= g.LastPage Then
   srcl/S: App.DebugWriter.Write "Report.Print: Printing page "+ str(i)
   srcl/S: If PagesPrinted > 0 Then g.NextPage
   srcl/S: g.DrawObject PrinterPages.Item(i - 1), xOffset, yOffset
   srcl/S: PagesPrinted = PagesPrinted + 1
   srcl/S: End If
   srcl/S: 
   srcl/S: Next i
   srcl/S: 
   srcl/S: #if Not TargetMacOS
   srcl/S: Next CopyCount
   srcl/S: #endif
   srcl/S: 
   srcl/S: //
   srcl/S: // For some reason, if this isn't done a second printing pass won't work
   srcl/S: //
   srcl/S: g = Nil
   srcl/S: App.DebugWriter.Write "Report.Print: Printed " + str(PagesPrinted) + " pages"
   srcl/S: App.DebugWriter.Write "Report.Print: Exit"
   srcl/S: Return True
   srcl/S: End Function
  sorc/g: 
 Meth/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: LeftMargin As Double
  sorc/G: 
   Enco/N: 134217984
   ntln/S: LeftMargin As Double
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: Pages As Group2D
  flag/N: 1
  sorc/G: 
   Enco/N: 134217984
   ntln/S: Pages As Group2D
   ntln/S: Holds the generated pages of the report
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: PrintableHeight As Double
  sorc/G: 
   Enco/N: 134217984
   ntln/S: PrintableHeight As Double
   ntln/S: Size (in inches) of the printable area of a page.
   ntln/S: This is calculated from the PrinterSetup object.
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: PrintableWidth As Double
  sorc/G: 
   Enco/N: 134217984
   ntln/S: PrintableWidth As Double
   ntln/S: This is the width in inches of the printable area of the page.
   ntln/S: It is calculated from the PrinterSetup object.
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: ps As PrinterSetup
  sorc/G: 
   Enco/N: 134217984
   ntln/S: ps As PrinterSetup
   ntln/S: PrinterSetup object associated with this report
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: Scale As Double
  flag/N: 1
  sorc/G: 
   Enco/N: 134217984
   ntln/S: Scale As Double
   ntln/S: Current scale setting for Pages
   ntln/S: 
  sorc/g: 
 Prop/g: 
 Prop/G: 
  Enco/N: 134217984
  decl/S: TopMargin As Double
  sorc/G: 
   Enco/N: 134217984
   ntln/S: TopMargin As Double
   ntln/S: 
   ntln/S: 
  sorc/g: 
 Prop/g: 
pObj/b: 
##RBvx-End#
